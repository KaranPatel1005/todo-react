{"version":3,"sources":["components/FilterButton.js","components/Todo.js","components/Form.js","App.js","index.js"],"names":["FilterButton","props","type","className","aria-pressed","isPressed","onClick","setFilter","name","Todo","useState","isEditing","setEditing","newName","setNewName","wasEditing","value","ref","useRef","useEffect","current","usePrevious","editFieldRef","editButtonRef","editingTemplete","onSubmit","e","preventDefault","editTask","id","htmlFor","onChange","target","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","focus","Form","setName","isActive","setActive","addTask","autoComplete","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","updatedTasks","map","remainingTasks","editedTaskList","tasklist","tasksNoun","length","headingText","filterList","listHeadingRef","prevTaskLength","newTask","nanoid","tabIndex","rol","aria-labelledby","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAgBeA,MAdf,SAAsBC,GAClB,OACI,yBACIC,KAAK,SACLC,UAAU,iBACVC,eAAcH,EAAMI,UACpBC,QAAS,kBAAML,EAAMM,UAAUN,EAAMO,OAJzC,UAKI,sBAAML,UAAU,kBAAhB,mBACA,+BAAOF,EAAMO,OACb,sBAAML,UAAU,kBAAhB,wBCgGGM,MAjGf,SAAcR,GACV,MAAgCS,oBAAS,GAAzC,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEMC,EAZV,SAAqBC,GACjB,IAAMC,EAAKC,mBAIX,OAHAC,qBAAU,WACNF,EAAIG,QAAUJ,KAEXC,EAAIG,QAOQC,CAAYV,GAEzBW,EAAeJ,iBAAO,MACtBK,EAAgBL,iBAAO,MAavBM,EACF,uBAAMrB,UAAU,cAAcsB,SAZlC,SAAsBC,GAClBA,EAAEC,iBACF1B,EAAM2B,SAAS3B,EAAM4B,GAAIhB,GACzBC,EAAW,IACXF,GAAW,IAQX,UACI,sBAAKT,UAAU,aAAf,UACI,wBAAOA,UAAU,aAAa2B,QAAS7B,EAAM4B,GAA7C,0BACkB5B,EAAMO,QAExB,uBACIqB,GAAI5B,EAAM4B,GACV1B,UAAU,YACVD,KAAK,OACLc,MAAOH,EACPkB,SAfhB,SAAsBL,GAClBZ,EAAWY,EAAEM,OAAOhB,QAeRC,IAAKK,OAEb,sBAAKnB,UAAU,YAAf,UACI,yBACID,KAAK,SACLC,UAAU,kBACVG,QAAS,kBAAMM,GAAW,IAH9B,mBAKI,uBAAMT,UAAU,kBAAhB,sBAA4CF,EAAMO,WAEtD,yBAAQN,KAAK,SAASC,UAAU,6BAAhC,iBAEI,uBAAMA,UAAU,kBAAhB,0BAAgDF,EAAMO,iBAKhEyB,EACF,sBAAK9B,UAAU,cAAf,UACI,sBAAKA,UAAU,OAAf,UACI,uBACI0B,GAAI5B,EAAM4B,GACV3B,KAAK,WACLgC,eAAgBjC,EAAMkC,UACtBJ,SAAU,kBAAM9B,EAAMmC,oBAAoBnC,EAAM4B,OAEpD,uBAAO1B,UAAU,aAAa2B,QAAS7B,EAAM4B,GAA7C,SACK5B,EAAMO,UAGf,sBAAKL,UAAU,YAAf,UACI,yBACID,KAAK,SACLC,UAAU,MACVG,QAAS,kBAAMM,GAAW,IAC1BK,IAAKM,EAJT,kBAKS,sBAAMpB,UAAU,kBAAhB,SAAmCF,EAAMO,UAElD,yBACIN,KAAK,SACLC,UAAU,kBACVG,QAAS,kBAAML,EAAMoC,WAAWpC,EAAM4B,KAH1C,oBAKW,sBAAM1B,UAAU,kBAAhB,SAAmCF,EAAMO,gBAehE,OATAW,qBAAU,YACFJ,GAAcJ,GACdW,EAAaF,QAAQkB,QAEtBvB,IAAeJ,GACdY,EAAcH,QAAQkB,UAE3B,CAACvB,EAAYJ,IAGZ,oBAAIR,UAAU,mBAAd,SACKQ,EAAYa,EAAkBS,KC5D5BM,MAxCf,SAActC,GACV,MAAwBS,mBAAS,IAAjC,mBAAOF,EAAP,KAAagC,EAAb,KACA,EAA8B9B,mBAAS,SAAvC,mBAAO+B,EAAP,KAAiBC,EAAjB,KAiBA,OACI,uBAAMjB,SAbV,SAAsBC,GACL,KAATlB,GACAkC,EAAU,IACVhB,EAAEC,mBAEFD,EAAEC,iBACF1B,EAAM0C,QAAQnC,GACdgC,EAAQ,IACRE,EAAU,WAKd,UACI,oBAAIvC,UAAU,gBAAd,SACI,uBAAO2B,QAAQ,aAAa3B,UAAU,YAAtC,qCAEJ,uBACID,KAAK,OACL2B,GAAG,aACH1B,UAAU,kBACVK,KAAK,OACLoC,aAAa,MACb5B,MAAOR,EACPuB,SA5BZ,SAAsBL,GAClBc,EAAQd,EAAEM,OAAOhB,UA4Bb,sBAAMb,UAAWsC,EAAW,kBAAoB,WAAhD,+BACA,wBACIvC,KAAK,SACLC,UAAU,2BAFd,qB,OC7BN0C,EAAa,CACfC,IAAK,kBAAM,GACXC,OAAQ,SAAAC,GAAI,OAAKA,EAAKb,WACtBc,UAAW,SAAAD,GAAI,OAAIA,EAAKb,YAGtBe,EAAeC,OAAOC,KAAKP,GAmGlBQ,MAzFf,SAAapD,GACT,MAA0BS,mBAAST,EAAMqD,OAAzC,mBAAOA,EAAP,KAAcC,EAAd,KACA,EAA4B7C,mBAAS,OAArC,mBAAO8C,EAAP,KAAejD,EAAf,KAOA,SAAS6B,EAAoBP,GACzB,IAAM4B,EAAeH,EAAMI,KAAI,SAAAV,GAC3B,OAAInB,IAAOmB,EAAKnB,GACL,2BAAKmB,GAAZ,IAAkBb,WAAYa,EAAKb,YAEhCa,KAEXO,EAASE,GAGb,SAASpB,EAAWR,GAChB,IAAM8B,EAAiBL,EAAME,QAAO,SAAAR,GAAI,OAAInB,IAAOmB,EAAKnB,MACxD0B,EAASI,GAGb,SAAS/B,EAASC,EAAIhB,GAClB,IAAM+C,EAAiBN,EAAMI,KAAI,SAAAV,GAC7B,OAAInB,IAAOmB,EAAKnB,GACL,2BAAKmB,GAAZ,IAAkBxC,KAAMK,IAErBmC,KAEXO,EAASK,GAGb,IAAMC,EAAWP,EACZE,OAAOX,EAAWW,IAClBE,KAAI,SAAAV,GAAI,OACL,cAAC,EAAD,CACInB,GAAImB,EAAKnB,GACTrB,KAAMwC,EAAKxC,KACX2B,UAAWa,EAAKb,UAChBiB,KAAMJ,EAAKnB,GACXO,oBAAqBA,EACrBC,WAAYA,EACZT,SAAUA,OAEhBkC,EAAgC,IAApBD,EAASE,OAAe,QAAU,OAC9CC,EAAkC,IAApBH,EAASE,OACvB,WADc,UAEXF,EAASE,OAFE,YAEQD,EAFR,cAIdG,EAAaf,EAAaQ,KAAI,SAAAlD,GAAI,OACpC,cAAC,EAAD,CAEIA,KAAMA,EACNH,UAAWG,IAASgD,EACpBjD,UAAWA,GAHNC,MAMP0D,EAAiBhD,iBAAO,MACxBiD,EApEV,SAAqBnD,GACjB,IAAMC,EAAMC,mBAIZ,OAHAC,qBAAU,WACNF,EAAIG,QAAUJ,KAEXC,EAAIG,QA+DYC,CAAYiC,EAAMS,QAQzC,OANA5C,qBAAU,WACFmC,EAAMS,OAASI,KAAoB,GACnCD,EAAe9C,QAAQkB,UAE5B,CAACgB,EAAMS,OAAQI,IAGd,sBAAKhE,UAAU,sBAAf,UACI,2CACA,cAAC,EAAD,CAAMwC,QAnEd,SAAiBnC,GACb,IAAM4D,EAAU,CAAEvC,GAAI,QAAUwC,cAAU7D,KAAMA,EAAM2B,WAAW,GACjEoB,EAAS,GAAD,mBAAKD,GAAL,CAAYc,QAkEhB,qBAAKjE,UAAU,mCAAf,SACK8D,IAEL,oBAAIpC,GAAG,eAAeyC,SAAS,KAAKrD,IAAKiD,EAAzC,SACKF,IAEL,oBACIO,IAAI,OACJpE,UAAU,wCACVqE,kBAAgB,eAHpB,SAIKX,QC7FjBY,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,CAAKrB,MARA,CACT,CAAEzB,GAAI,SAAUrB,KAAM,MAAO2B,WAAW,GACxC,CAAEN,GAAI,SAAUrB,KAAM,QAAS2B,WAAW,GAC1C,CAAEN,GAAI,SAAUrB,KAAM,SAAU2B,WAAW,QAO3CyC,SAASC,eAAe,W","file":"static/js/main.0ecff878.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction FilterButton(props) {\r\n    return (\r\n        <button\r\n            type=\"button\"\r\n            className=\"btn toggle-btn\"\r\n            aria-pressed={props.isPressed}\r\n            onClick={() => props.setFilter(props.name)}>\r\n            <span className=\"visually-hidden\">Show </span>\r\n            <span>{props.name}</span>\r\n            <span className=\"visually-hidden\"> tasks</span>\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default FilterButton;","import React, { useEffect, useRef, useState } from 'react';\r\n\r\nfunction usePrevious(value) {\r\n    const ref= useRef();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n    return ref.current;\r\n}\r\n\r\nfunction Todo(props) {\r\n    const [isEditing, setEditing] = useState(false);\r\n    const [newName, setNewName] = useState('');\r\n\r\n    const wasEditing = usePrevious(isEditing);\r\n\r\n    const editFieldRef = useRef(null);\r\n    const editButtonRef = useRef(null);\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        props.editTask(props.id, newName);\r\n        setNewName(\"\");\r\n        setEditing(false);\r\n    }\r\n\r\n    function handleChange(e) {\r\n        setNewName(e.target.value);\r\n    }\r\n\r\n    const editingTemplete = (\r\n        <form className=\"stack-small\" onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n                <label className=\"todo-label\" htmlFor={props.id}>\r\n                    New name for {props.name}\r\n                </label>\r\n                <input\r\n                    id={props.id}\r\n                    className=\"todo-text\"\r\n                    type=\"text\"\r\n                    value={newName}\r\n                    onChange={handleChange}\r\n                    ref={editFieldRef} />\r\n            </div>\r\n            <div className=\"btn-group\">\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn todo-cancel\"\r\n                    onClick={() => setEditing(false)}>\r\n                    Cancel\r\n                    <span className=\"visually-hidden\">renaming {props.name}</span>\r\n                </button>\r\n                <button type=\"submit\" className=\"btn btn__primary todo-edit\">\r\n                    Save\r\n                    <span className=\"visually-hidden\">new name for {props.name}</span>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n    const viewTemplate = (\r\n        <div className=\"stack-small\">\r\n            <div className=\"c-cb\">\r\n                <input\r\n                    id={props.id}\r\n                    type=\"checkbox\"\r\n                    defaultChecked={props.completed}\r\n                    onChange={() => props.toggleTaskCompleted(props.id)}\r\n                />\r\n                <label className=\"todo-label\" htmlFor={props.id}>\r\n                    {props.name}\r\n                </label>\r\n            </div>\r\n            <div className=\"btn-group\">\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn\"\r\n                    onClick={() => setEditing(true)}\r\n                    ref={editButtonRef}>\r\n                    Edit <span className=\"visually-hidden\">{props.name}</span>\r\n                </button>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn__danger\"\r\n                    onClick={() => props.deleteTask(props.id)}\r\n                >\r\n                    Delete <span className=\"visually-hidden\">{props.name}</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    useEffect(() => {\r\n        if(!wasEditing && isEditing) {\r\n            editFieldRef.current.focus();\r\n        } \r\n        if(wasEditing && !isEditing) {\r\n            editButtonRef.current.focus();\r\n        }\r\n    }, [wasEditing, isEditing]);\r\n\r\n    return (\r\n        <li className=\"todo stack-small\">\r\n            {isEditing ? editingTemplete : viewTemplate}\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Todo;","import React, { useState } from 'react';\r\n\r\nfunction Form(props) {\r\n    const [name, setName] = useState('');\r\n    const [isActive, setActive] = useState(\"false\");\r\n    function handleChange(e) {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        if (name === '') {\r\n            setActive(\"\");\r\n            e.preventDefault();\r\n        } else {\r\n            e.preventDefault();\r\n            props.addTask(name);\r\n            setName(\"\");\r\n            setActive(\"false\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h2 className=\"label-wrapper\">\r\n                <label htmlFor=\"todo-input\" className=\"label__lg\">What need to be done?</label>\r\n            </h2>\r\n            <input\r\n                type=\"text\"\r\n                id=\"todo-input\"\r\n                className=\"input input__lg\"\r\n                name=\"text\"\r\n                autoComplete=\"off\"\r\n                value={name}\r\n                onChange={handleChange} />\r\n            <span className={isActive ? \"visually-hidden\" : \"text-red\"}>Wrtite something!</span>\r\n            <button\r\n                type=\"submit\"\r\n                className=\"btn btn__primary btn__lg\">Add</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React, { useState, useRef, useEffect } from 'react';\r\nimport FilterButton from './components/FilterButton';\r\nimport Todo from './components/Todo';\r\nimport Form from './components/Form';\r\nimport { nanoid } from 'nanoid';\r\n\r\nconst FILTER_MAP = {\r\n    All: () => true,\r\n    Active: task => !task.completed,\r\n    Completed: task => task.completed\r\n};\r\n\r\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\r\n\r\nfunction usePrevious(value) {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n    return ref.current;\r\n}\r\n\r\nfunction App(props) {\r\n    const [tasks, setTasks] = useState(props.tasks);\r\n    const [filter, setFilter] = useState('All');\r\n\r\n    function addTask(name) {\r\n        const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\r\n        setTasks([...tasks, newTask]);\r\n    }\r\n\r\n    function toggleTaskCompleted(id) {\r\n        const updatedTasks = tasks.map(task => {\r\n            if (id === task.id) {\r\n                return { ...task, completed: !task.completed };\r\n            }\r\n            return task;\r\n        });\r\n        setTasks(updatedTasks);\r\n    }\r\n\r\n    function deleteTask(id) {\r\n        const remainingTasks = tasks.filter(task => id !== task.id);\r\n        setTasks(remainingTasks);\r\n    }\r\n\r\n    function editTask(id, newName) {\r\n        const editedTaskList = tasks.map(task => {\r\n            if (id === task.id) {\r\n                return { ...task, name: newName };\r\n            }\r\n            return task;\r\n        });\r\n        setTasks(editedTaskList);\r\n    }\r\n\r\n    const tasklist = tasks\r\n        .filter(FILTER_MAP[filter])\r\n        .map(task =>\r\n            <Todo\r\n                id={task.id}\r\n                name={task.name}\r\n                completed={task.completed}\r\n                keys={task.id}\r\n                toggleTaskCompleted={toggleTaskCompleted}\r\n                deleteTask={deleteTask}\r\n                editTask={editTask} />);\r\n\r\n    const tasksNoun = tasklist.length !== 1 ? 'tasks' : 'task';\r\n    const headingText = tasklist.length === 0\r\n        ? 'No Tasks'\r\n        : `${tasklist.length} ${tasksNoun} remaining`;\r\n\r\n    const filterList = FILTER_NAMES.map(name => (\r\n        <FilterButton\r\n            key={name}\r\n            name={name}\r\n            isPressed={name === filter}\r\n            setFilter={setFilter} />\r\n    ));\r\n\r\n    const listHeadingRef = useRef(null);\r\n    const prevTaskLength = usePrevious(tasks.length);\r\n\r\n    useEffect(() => {\r\n        if (tasks.length - prevTaskLength === -1) {\r\n            listHeadingRef.current.focus();\r\n        }\r\n    }, [tasks.length, prevTaskLength]);\r\n\r\n    return (\r\n        <div className=\"todoapp stack-large\">\r\n            <h1>TodoMatic</h1>\r\n            <Form addTask={addTask} />\r\n            <div className=\"filter btn-group stack-exception\">\r\n                {filterList}\r\n            </div>\r\n            <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\r\n                {headingText}\r\n            </h2>\r\n            <ul\r\n                rol=\"list\"\r\n                className=\"todo-list stack-large stack-exception\"\r\n                aria-labelledby=\"list-heading\">\r\n                {tasklist}\r\n            </ul>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst DATA = [\n    { id: \"todo-0\", name: \"Eat\", completed: true },\n    { id: \"todo-1\", name: \"Sleep\", completed: false },\n    { id: \"todo-2\", name: \"Repeat\", completed: false }\n]\n\nReactDOM.render(\n    <React.StrictMode >\n        <App tasks={DATA} />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}